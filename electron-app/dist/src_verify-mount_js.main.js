"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "src_verify-mount_js";
exports.ids = ["src_verify-mount_js"];
exports.modules = {

/***/ "./src/verify-mount.js":
/*!*****************************!*\
  !*** ./src/verify-mount.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("{\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try {\n            step(generator.next(value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function rejected(value) { try {\n            step(generator[\"throw\"](value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function () { if (t[0] & 1)\n            throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function () { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f)\n            throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _)\n            try {\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n                    return t;\n                if (y = 0, t)\n                    op = [op[0] & 2, t.value];\n                switch (op[0]) {\n                    case 0:\n                    case 1:\n                        t = op;\n                        break;\n                    case 4:\n                        _.label++;\n                        return { value: op[1], done: false };\n                    case 5:\n                        _.label++;\n                        y = op[1];\n                        op = [0];\n                        continue;\n                    case 7:\n                        op = _.ops.pop();\n                        _.trys.pop();\n                        continue;\n                    default:\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                            _ = 0;\n                            continue;\n                        }\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {\n                            _.label = op[1];\n                            break;\n                        }\n                        if (op[0] === 6 && _.label < t[1]) {\n                            _.label = t[1];\n                            t = op;\n                            break;\n                        }\n                        if (t && _.label < t[2]) {\n                            _.label = t[2];\n                            _.ops.push(op);\n                            break;\n                        }\n                        if (t[2])\n                            _.ops.pop();\n                        _.trys.pop();\n                        continue;\n                }\n                op = body.call(thisArg, _);\n            }\n            catch (e) {\n                op = [6, e];\n                y = 0;\n            }\n            finally {\n                f = t = 0;\n            }\n        if (op[0] & 5)\n            throw op[1];\n        return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.verifyProjFSMount = verifyProjFSMount;\nvar fs_1 = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nfunction verifyProjFSMount(mountPath) {\n    return __awaiter(this, void 0, void 0, function () {\n        var mountStats, expectedDirs, issues, _i, expectedDirs_1, dir, dirPath, stats, isDir, mode, err_1, debugContents, err_2, err_3;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    console.log(\"\\n[MountVerification] Checking ProjFS mount at \".concat(mountPath, \"...\"));\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 13, , 14]);\n                    return [4 /*yield*/, fs_1.promises.stat(mountPath)];\n                case 2:\n                    mountStats = _a.sent();\n                    console.log(\"[MountVerification] Mount point exists: \".concat(mountStats.isDirectory() ? 'YES (directory)' : 'NO (not a directory)'));\n                    expectedDirs = ['chats', 'debug', 'objects', 'invites', 'types'];\n                    issues = [];\n                    _i = 0, expectedDirs_1 = expectedDirs;\n                    _a.label = 3;\n                case 3:\n                    if (!(_i < expectedDirs_1.length))\n                        return [3 /*break*/, 8];\n                    dir = expectedDirs_1[_i];\n                    dirPath = path.join(mountPath, dir);\n                    _a.label = 4;\n                case 4:\n                    _a.trys.push([4, 6, , 7]);\n                    return [4 /*yield*/, fs_1.promises.stat(dirPath)];\n                case 5:\n                    stats = _a.sent();\n                    isDir = stats.isDirectory();\n                    mode = stats.mode;\n                    console.log(\"[MountVerification] \".concat(dir, \": isDirectory=\").concat(isDir, \", mode=\").concat(mode.toString(8), \" (0x\").concat(mode.toString(16), \")\"));\n                    if (!isDir) {\n                        issues.push(\"\".concat(dir, \" is showing as a file instead of directory!\"));\n                    }\n                    return [3 /*break*/, 7];\n                case 6:\n                    err_1 = _a.sent();\n                    console.log(\"[MountVerification] \".concat(dir, \": ERROR - \").concat(err_1.message));\n                    issues.push(\"\".concat(dir, \" cannot be accessed: \").concat(err_1.message));\n                    return [3 /*break*/, 7];\n                case 7:\n                    _i++;\n                    return [3 /*break*/, 3];\n                case 8:\n                    if (issues.length > 0) {\n                        console.error(\"[MountVerification] \\u274C MOUNT ISSUES DETECTED:\");\n                        issues.forEach(function (issue) { return console.error(\"  - \".concat(issue)); });\n                        console.error(\"[MountVerification] This indicates the isDirectory flag is not being properly set in ProjFS\");\n                    }\n                    else {\n                        console.log(\"[MountVerification] \\u2705 All virtual directories are properly mounted as directories\");\n                    }\n                    _a.label = 9;\n                case 9:\n                    _a.trys.push([9, 11, , 12]);\n                    return [4 /*yield*/, fs_1.promises.readdir(path.join(mountPath, 'debug'))];\n                case 10:\n                    debugContents = _a.sent();\n                    console.log(\"[MountVerification] /debug directory contents: \".concat(debugContents.length, \" items\"));\n                    return [3 /*break*/, 12];\n                case 11:\n                    err_2 = _a.sent();\n                    console.error(\"[MountVerification] Could not list /debug contents: \".concat(err_2.message));\n                    return [3 /*break*/, 12];\n                case 12: return [3 /*break*/, 14];\n                case 13:\n                    err_3 = _a.sent();\n                    console.error(\"[MountVerification] ERROR: Could not verify mount: \".concat(err_3.message));\n                    return [3 /*break*/, 14];\n                case 14: return [2 /*return*/];\n            }\n        });\n    });\n}\n\n\n//# sourceURL=webpack://one-filer-login/./src/verify-mount.js?\n}");

/***/ })

};
;