/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/renderer.ts":
/*!*************************!*\
  !*** ./src/renderer.ts ***!
  \*************************/
/***/ (() => {

eval("{\nconst loginForm = document.getElementById('loginForm');\nconst statusDiv = document.getElementById('status');\nconst connectedView = document.getElementById('connectedView');\nconst loginBtn = document.getElementById('loginBtn');\nconst logoutBtn = document.getElementById('logoutBtn');\nconst refreshBtn = document.getElementById('refreshBtn');\nconst testBtn = document.getElementById('testBtn');\nconst wslStatusSpan = document.getElementById('wslStatus');\nconst replicantStatusSpan = document.getElementById('replicantStatus');\n// Test view elements\nconst testView = document.getElementById('testView');\nconst runAllTestsBtn = document.getElementById('runAllTestsBtn');\nconst runQuickTestsBtn = document.getElementById('runQuickTestsBtn');\nconst backToMainBtn = document.getElementById('backToMainBtn');\nconst testProgress = document.getElementById('testProgress');\nconst progressFill = document.getElementById('progressFill');\nconst progressText = document.getElementById('progressText');\nconst testSummary = document.getElementById('testSummary');\nconst testSuites = document.getElementById('testSuites');\nconst totalTests = document.getElementById('totalTests');\nconst passedTests = document.getElementById('passedTests');\nconst failedTests = document.getElementById('failedTests');\nconst testDuration = document.getElementById('testDuration');\nlet isConnected = false;\nlet statusCheckInterval = null;\nfunction showStatus(message, isError = false) {\n    statusDiv.className = isError ? 'status error' : 'status success';\n    statusDiv.textContent = message;\n    statusDiv.style.display = 'block';\n}\nfunction hideStatus() {\n    statusDiv.className = 'status';\n    statusDiv.textContent = '';\n    statusDiv.style.display = 'none';\n}\n// Check and update status indicators\nasync function updateStatus() {\n    try {\n        // Check WSL status\n        const wslStatus = await window.electronAPI.checkWslStatus();\n        if (!wslStatus.installed) {\n            wslStatusSpan.textContent = 'Not Installed';\n            wslStatusSpan.className = 'status-value error';\n        }\n        else if (wslStatus.running) {\n            wslStatusSpan.textContent = 'Running';\n            wslStatusSpan.className = 'status-value success';\n        }\n        else {\n            wslStatusSpan.textContent = 'Stopped';\n            wslStatusSpan.className = 'status-value warning';\n        }\n        // Check replicant status\n        const replicantStatus = await window.electronAPI.checkReplicantStatus();\n        if (replicantStatus.running) {\n            replicantStatusSpan.textContent = `Running (PID: ${replicantStatus.pid})`;\n            replicantStatusSpan.className = 'status-value success';\n        }\n        else {\n            replicantStatusSpan.textContent = 'Stopped';\n            replicantStatusSpan.className = 'status-value error';\n        }\n    }\n    catch (error) {\n        console.error('Error checking status:', error);\n    }\n}\n// Start periodic status updates\nfunction startStatusUpdates() {\n    updateStatus();\n    statusCheckInterval = setInterval(updateStatus, 2000);\n}\n// Stop periodic status updates\nfunction stopStatusUpdates() {\n    if (statusCheckInterval) {\n        clearInterval(statusCheckInterval);\n        statusCheckInterval = null;\n    }\n}\nloginForm.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    const secret = loginForm.secret.value;\n    const configPath = loginForm.configPath.value.trim() || undefined;\n    // Validate inputs\n    if (!secret) {\n        showStatus('Please enter your password', true);\n        return;\n    }\n    // Check WSL status first\n    const wslStatus = await window.electronAPI.checkWslStatus();\n    if (!wslStatus.installed) {\n        showStatus('WSL is not installed. Please install WSL first.', true);\n        return;\n    }\n    if (!wslStatus.running) {\n        showStatus('Starting WSL...', false);\n        const startResult = await window.electronAPI.startWsl();\n        if (!startResult.success) {\n            showStatus(startResult.message || 'Failed to start WSL', true);\n            return;\n        }\n    }\n    // Disable form\n    loginBtn.disabled = true;\n    loginBtn.textContent = 'Starting...';\n    hideStatus();\n    try {\n        const result = await window.electronAPI.login({\n            secret,\n            configPath\n        });\n        if (result.success) {\n            // Show success\n            showStatus(result.message, false);\n            // Update mount path if provided\n            if (result.mountPoint) {\n                const mountPathElement = document.querySelector('.mount-path');\n                if (mountPathElement) {\n                    mountPathElement.textContent = result.mountPoint;\n                }\n            }\n            // Hide login form and show connected view\n            setTimeout(() => {\n                loginForm.style.display = 'none';\n                hideStatus();\n                connectedView.style.display = 'block';\n                isConnected = true;\n            }, 1500);\n        }\n        else {\n            // Show error\n            showStatus(result.message, true);\n        }\n    }\n    catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to start replicant';\n        showStatus(errorMessage, true);\n    }\n    finally {\n        // Re-enable form\n        loginBtn.disabled = false;\n        loginBtn.textContent = 'Start';\n    }\n});\nlogoutBtn.addEventListener('click', async () => {\n    logoutBtn.disabled = true;\n    logoutBtn.textContent = 'Stopping...';\n    try {\n        const result = await window.electronAPI.stopReplicant();\n        if (result.success) {\n            // Reset UI\n            connectedView.style.display = 'none';\n            loginForm.style.display = 'block';\n            isConnected = false;\n            // Clear sensitive data\n            loginForm.secret.value = '';\n            showStatus('Replicant stopped successfully', false);\n            setTimeout(hideStatus, 2000);\n        }\n        else {\n            showStatus(result.message || 'Failed to stop replicant', true);\n        }\n    }\n    catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to stop replicant';\n        showStatus(errorMessage, true);\n    }\n    finally {\n        logoutBtn.disabled = false;\n        logoutBtn.textContent = 'Stop';\n    }\n});\n// Refresh button handler\nrefreshBtn.addEventListener('click', async () => {\n    refreshBtn.disabled = true;\n    refreshBtn.textContent = 'Refreshing...';\n    await updateStatus();\n    setTimeout(() => {\n        refreshBtn.disabled = false;\n        refreshBtn.textContent = 'Refresh Status';\n    }, 500);\n});\n// Handle window close\nwindow.addEventListener('beforeunload', async (e) => {\n    if (isConnected) {\n        e.preventDefault();\n        e.returnValue = '';\n        // Attempt to stop replicant before closing\n        await window.electronAPI.stopReplicant();\n    }\n});\n// Start status monitoring when page loads\nwindow.addEventListener('DOMContentLoaded', () => {\n    startStatusUpdates();\n    // Listen for test progress updates\n    window.electronAPI.onTestProgress((progress) => {\n        updateTestProgress(progress);\n    });\n});\n// Stop status monitoring when page unloads\nwindow.addEventListener('unload', () => {\n    stopStatusUpdates();\n});\n// Test functionality\ntestBtn.addEventListener('click', () => {\n    connectedView.style.display = 'none';\n    testView.style.display = 'block';\n    resetTestView();\n});\nbackToMainBtn.addEventListener('click', () => {\n    testView.style.display = 'none';\n    connectedView.style.display = 'block';\n});\nrunAllTestsBtn.addEventListener('click', async () => {\n    await runTests('all');\n});\nrunQuickTestsBtn.addEventListener('click', async () => {\n    await runTests('quick');\n});\nfunction resetTestView() {\n    testProgress.style.display = 'none';\n    testSummary.style.display = 'none';\n    testSuites.innerHTML = '';\n    progressFill.style.width = '0%';\n    progressText.textContent = 'Ready to run tests';\n}\nasync function runTests(type) {\n    try {\n        // Disable buttons and show progress\n        runAllTestsBtn.disabled = true;\n        runQuickTestsBtn.disabled = true;\n        testProgress.style.display = 'block';\n        testSummary.style.display = 'none';\n        testSuites.innerHTML = '';\n        // Start test execution\n        const result = await window.electronAPI.runTests(type);\n        if (result.success) {\n            // Display results\n            displayTestResults(result.results);\n        }\n        else {\n            // Show error\n            showTestError(result.error || 'Unknown test error');\n        }\n    }\n    catch (error) {\n        console.error('Error running tests:', error);\n        showTestError(error instanceof Error ? error.message : 'Failed to run tests');\n    }\n    finally {\n        // Re-enable buttons\n        runAllTestsBtn.disabled = false;\n        runQuickTestsBtn.disabled = false;\n        testProgress.style.display = 'none';\n    }\n}\nfunction updateTestProgress(progress) {\n    progressFill.style.width = `${progress.progress}%`;\n    progressText.textContent = `${progress.currentSuite}: ${progress.currentTest} (${progress.completedSuites}/${progress.totalSuites})`;\n}\nfunction displayTestResults(results) {\n    const allSuites = results.suites || [];\n    const startTime = Date.now();\n    // Calculate totals\n    let totalTestCount = 0;\n    let totalPassed = 0;\n    let totalFailed = 0;\n    let totalDuration = 0;\n    allSuites.forEach((suite) => {\n        totalTestCount += suite.tests.length;\n        totalPassed += suite.passed;\n        totalFailed += suite.failed;\n        totalDuration += suite.duration;\n    });\n    // Update summary\n    totalTests.textContent = totalTestCount.toString();\n    passedTests.textContent = totalPassed.toString();\n    failedTests.textContent = totalFailed.toString();\n    testDuration.textContent = `${totalDuration}ms`;\n    // Show summary\n    testSummary.style.display = 'block';\n    // Display suites\n    testSuites.innerHTML = '';\n    allSuites.forEach((suite) => {\n        const suiteElement = createSuiteElement(suite);\n        testSuites.appendChild(suiteElement);\n    });\n}\nfunction createSuiteElement(suite) {\n    const suiteDiv = document.createElement('div');\n    suiteDiv.className = 'test-suite';\n    // Suite header\n    const headerDiv = document.createElement('div');\n    headerDiv.className = 'suite-header';\n    const titleSpan = document.createElement('span');\n    titleSpan.className = 'suite-title';\n    titleSpan.textContent = suite.name;\n    const statusDiv = document.createElement('div');\n    statusDiv.className = `suite-status ${suite.failed > 0 ? 'failed' : 'passed'}`;\n    statusDiv.innerHTML = `\r\n    <span>${suite.passed} passed, ${suite.failed} failed</span>\r\n    <span class=\"test-duration\">${suite.duration}ms</span>\r\n  `;\n    headerDiv.appendChild(titleSpan);\n    headerDiv.appendChild(statusDiv);\n    // Suite tests (collapsible)\n    const testsDiv = document.createElement('div');\n    testsDiv.className = 'suite-tests';\n    testsDiv.style.display = suite.failed > 0 ? 'block' : 'none'; // Show failed suites by default\n    suite.tests.forEach((test) => {\n        const testDiv = document.createElement('div');\n        testDiv.className = 'test-item';\n        const testName = document.createElement('div');\n        testName.className = 'test-name';\n        testName.textContent = test.name;\n        const testStatus = document.createElement('span');\n        testStatus.className = `test-status ${test.status}`;\n        testStatus.textContent = test.status;\n        const testInfo = document.createElement('div');\n        testInfo.style.display = 'flex';\n        testInfo.style.alignItems = 'center';\n        testInfo.appendChild(testStatus);\n        if (test.duration) {\n            const duration = document.createElement('span');\n            duration.className = 'test-duration';\n            duration.textContent = `${test.duration}ms`;\n            testInfo.appendChild(duration);\n        }\n        testDiv.appendChild(testName);\n        testDiv.appendChild(testInfo);\n        // Add error if present\n        if (test.error) {\n            const errorDiv = document.createElement('div');\n            errorDiv.className = 'test-error';\n            errorDiv.textContent = test.error;\n            testDiv.appendChild(errorDiv);\n        }\n        testsDiv.appendChild(testDiv);\n    });\n    // Make header clickable to toggle tests\n    headerDiv.addEventListener('click', () => {\n        testsDiv.style.display = testsDiv.style.display === 'none' ? 'block' : 'none';\n    });\n    suiteDiv.appendChild(headerDiv);\n    suiteDiv.appendChild(testsDiv);\n    return suiteDiv;\n}\nfunction showTestError(error) {\n    testSuites.innerHTML = `\r\n    <div class=\"test-suite\">\r\n      <div class=\"suite-header\">\r\n        <span class=\"suite-title\">Test Error</span>\r\n        <div class=\"suite-status failed\">Failed to run tests</div>\r\n      </div>\r\n      <div class=\"suite-tests\" style=\"display: block;\">\r\n        <div class=\"test-item\">\r\n          <div class=\"test-name\">Test execution failed</div>\r\n          <span class=\"test-status fail\">fail</span>\r\n        </div>\r\n        <div class=\"test-error\">${error}</div>\r\n      </div>\r\n    </div>\r\n  `;\n}\n\n\n//# sourceURL=webpack://one-filer-login/./src/renderer.ts?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/renderer.ts"]();
/******/ 	
/******/ })()
;