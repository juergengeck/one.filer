/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/renderer.ts":
/*!*************************!*\
  !*** ./src/renderer.ts ***!
  \*************************/
/***/ (() => {

eval("{\nconst loginForm = document.getElementById('loginForm');\nconst statusDiv = document.getElementById('status');\nconst connectedView = document.getElementById('connectedView');\nconst loginBtn = document.getElementById('loginBtn');\nconst logoutBtn = document.getElementById('logoutBtn');\nconst refreshBtn = document.getElementById('refreshBtn');\nconst wslStatusSpan = document.getElementById('wslStatus');\nconst replicantStatusSpan = document.getElementById('replicantStatus');\nlet isConnected = false;\nlet statusCheckInterval = null;\nfunction showStatus(message, isError = false) {\n    statusDiv.className = isError ? 'status error' : 'status success';\n    statusDiv.textContent = message;\n    statusDiv.style.display = 'block';\n}\nfunction hideStatus() {\n    statusDiv.className = 'status';\n    statusDiv.textContent = '';\n    statusDiv.style.display = 'none';\n}\n// Check and update status indicators\nasync function updateStatus() {\n    try {\n        // Check WSL status\n        const wslStatus = await window.electronAPI.checkWslStatus();\n        if (!wslStatus.installed) {\n            wslStatusSpan.textContent = 'Not Installed';\n            wslStatusSpan.className = 'status-value error';\n        }\n        else if (wslStatus.running) {\n            wslStatusSpan.textContent = 'Running';\n            wslStatusSpan.className = 'status-value success';\n        }\n        else {\n            wslStatusSpan.textContent = 'Stopped';\n            wslStatusSpan.className = 'status-value warning';\n        }\n        // Check replicant status\n        const replicantStatus = await window.electronAPI.checkReplicantStatus();\n        if (replicantStatus.running) {\n            replicantStatusSpan.textContent = `Running (PID: ${replicantStatus.pid})`;\n            replicantStatusSpan.className = 'status-value success';\n        }\n        else {\n            replicantStatusSpan.textContent = 'Stopped';\n            replicantStatusSpan.className = 'status-value error';\n        }\n    }\n    catch (error) {\n        console.error('Error checking status:', error);\n    }\n}\n// Start periodic status updates\nfunction startStatusUpdates() {\n    updateStatus();\n    statusCheckInterval = setInterval(updateStatus, 2000);\n}\n// Stop periodic status updates\nfunction stopStatusUpdates() {\n    if (statusCheckInterval) {\n        clearInterval(statusCheckInterval);\n        statusCheckInterval = null;\n    }\n}\nloginForm.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    const secret = loginForm.secret.value;\n    const configPath = loginForm.configPath.value.trim() || undefined;\n    // Validate inputs\n    if (!secret) {\n        showStatus('Please enter your password', true);\n        return;\n    }\n    // Check WSL status first\n    const wslStatus = await window.electronAPI.checkWslStatus();\n    if (!wslStatus.installed) {\n        showStatus('WSL is not installed. Please install WSL first.', true);\n        return;\n    }\n    if (!wslStatus.running) {\n        showStatus('Starting WSL...', false);\n        const startResult = await window.electronAPI.startWsl();\n        if (!startResult.success) {\n            showStatus(startResult.message || 'Failed to start WSL', true);\n            return;\n        }\n    }\n    // Disable form\n    loginBtn.disabled = true;\n    loginBtn.textContent = 'Starting...';\n    hideStatus();\n    try {\n        const result = await window.electronAPI.login({\n            secret,\n            configPath\n        });\n        if (result.success) {\n            // Show success\n            showStatus(result.message, false);\n            // Update mount path if provided\n            if (result.mountPoint) {\n                const mountPathElement = document.querySelector('.mount-path');\n                if (mountPathElement) {\n                    mountPathElement.textContent = result.mountPoint;\n                }\n            }\n            // Hide login form and show connected view\n            setTimeout(() => {\n                loginForm.style.display = 'none';\n                hideStatus();\n                connectedView.style.display = 'block';\n                isConnected = true;\n            }, 1500);\n        }\n        else {\n            // Show error\n            showStatus(result.message, true);\n        }\n    }\n    catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to start replicant';\n        showStatus(errorMessage, true);\n    }\n    finally {\n        // Re-enable form\n        loginBtn.disabled = false;\n        loginBtn.textContent = 'Start';\n    }\n});\nlogoutBtn.addEventListener('click', async () => {\n    logoutBtn.disabled = true;\n    logoutBtn.textContent = 'Stopping...';\n    try {\n        const result = await window.electronAPI.stopReplicant();\n        if (result.success) {\n            // Reset UI\n            connectedView.style.display = 'none';\n            loginForm.style.display = 'block';\n            isConnected = false;\n            // Clear sensitive data\n            loginForm.secret.value = '';\n            showStatus('Replicant stopped successfully', false);\n            setTimeout(hideStatus, 2000);\n        }\n        else {\n            showStatus(result.message || 'Failed to stop replicant', true);\n        }\n    }\n    catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to stop replicant';\n        showStatus(errorMessage, true);\n    }\n    finally {\n        logoutBtn.disabled = false;\n        logoutBtn.textContent = 'Stop';\n    }\n});\n// Refresh button handler\nrefreshBtn.addEventListener('click', async () => {\n    refreshBtn.disabled = true;\n    refreshBtn.textContent = 'Refreshing...';\n    await updateStatus();\n    setTimeout(() => {\n        refreshBtn.disabled = false;\n        refreshBtn.textContent = 'Refresh Status';\n    }, 500);\n});\n// Handle window close\nwindow.addEventListener('beforeunload', async (e) => {\n    if (isConnected) {\n        e.preventDefault();\n        e.returnValue = '';\n        // Attempt to stop replicant before closing\n        await window.electronAPI.stopReplicant();\n    }\n});\n// Start status monitoring when page loads\nwindow.addEventListener('DOMContentLoaded', () => {\n    startStatusUpdates();\n});\n// Stop status monitoring when page unloads\nwindow.addEventListener('unload', () => {\n    stopStatusUpdates();\n});\n\n\n//# sourceURL=webpack://one-filer-login/./src/renderer.ts?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/renderer.ts"]();
/******/ 	
/******/ })()
;